package structure:

com.runbook.config
	ApplicationConfig
	DatabaseConfig
com.runbook.dao
	CredentialValidatorDaoImpl
	CredentialValidatorMapper
	ICredentialValidatorDao
com.runbook.domain
	Validator
com.runbook.svcs
	ICredentialValidatorSvcs
	ICredentialValidtorImpl
com.runbook.utility
	validationUility

/******************************************************/
DatabaseConfig.java
--------------------------------
package com.runbook.config;

import javax.sql.DataSource;

import org.apache.ibatis.mapping.Environment;
import org.apache.ibatis.session.Configuration;
import org.apache.ibatis.session.SqlSession;
import org.apache.ibatis.session.SqlSessionFactory;
import org.apache.ibatis.session.SqlSessionFactoryBuilder;
import org.apache.ibatis.transaction.TransactionFactory;
import org.apache.ibatis.transaction.jdbc.JdbcTransactionFactory;

public class DatabaseConfig {
	
	private String username;
	private String password;
	private String connectionString;
	private String databaseDriver;
	
	private DataSource dataSource;
	private TransactionFactory transactionFactory;
	private Environment environment;
	private Configuration configuration;
	private SqlSessionFactory sqlSessionFactory;
	
	private DatabaseConfig(String databaseDriver, String connectionString, String username, String password)
	{
		this.databaseDriver = databaseDriver;
		this.connectionString = connectionString;
		this.username = username;
		this.password = password;
		
		dataSource = new org.apache.ibatis.datasource.pooled.PooledDataSource(this.databaseDriver, this.connectionString, this.username, this.password);
		transactionFactory = new JdbcTransactionFactory();
		environment = new Environment("development",transactionFactory, dataSource);
		configuration = new Configuration( environment );
		sqlSessionFactory = new SqlSessionFactoryBuilder().build(configuration);
	}
	
	public static DatabaseConfig createDatabaseConfiguration(String databaseDriver, String connectionString, String username, String password)
	{
		return new DatabaseConfig(databaseDriver, connectionString, username, password);
	}
	public void addMapper(Class newMapper)
	{
		configuration.addMapper(newMapper);
		sqlSessionFactory = new SqlSessionFactoryBuilder().build(configuration);
	}
	public SqlSession getSession()
	{
		return sqlSessionFactory.openSession();
	}
	
}
----------------------------------------------------------------------------------------------------------
CredentialValidatorDaoImp.java
---------------------------------------------
package com.runbook.dao;

import java.io.IOException;

import org.apache.ibatis.session.SqlSession;
import org.codehaus.jackson.JsonGenerationException;
import org.codehaus.jackson.map.JsonMappingException;
import org.codehaus.jackson.map.ObjectMapper;

import com.runbook.config.DatabaseConfig;
import com.runbook.domain.User;

public class CredentialValidatorDaoImpl implements ICredentialValidatorDao{
	
	CredentialValidatorMapper validatorMapper;
	DatabaseConfig config;
	
	public CredentialValidatorDaoImpl()
	{
		config = DatabaseConfig.createDatabaseConfiguration("com.mysql.jdbc.Driver", 
				"jdbc:mysql://localhost:3306/contentmanager", "root" , "desilva5" );
		config.addMapper(CredentialValidatorMapper.class);
	}
	
	public String getStoredHash(String SID)
	{
		SqlSession session = config.getSession();
		validatorMapper = session.getMapper(CredentialValidatorMapper.class);
		String storedHash = validatorMapper.getStoredHash(SID);
		session.close();
		
		return storedHash;
	}
	public User getUser(String SID)
	{
		User newUser = null;
		SqlSession session = config.getSession();
		validatorMapper = session.getMapper(CredentialValidatorMapper.class);
		newUser = validatorMapper.getUser(SID);
		return newUser;
	}
	
	public static void main(String[] args) throws JsonGenerationException, JsonMappingException, IOException
	{
		/*CredentialValidatorDaoImpl imp = new CredentialValidatorDaoImpl();
		System.out.println( imp.getStoredHash("jb"));*/
		ObjectMapper mapper = new ObjectMapper();
		User user = new User("Anton", "Desilva", "adesilva@gmail.com", "username", "password");
		System.out.println( mapper.writeValueAsString(user));		
	}
}
-------------------------------------------------------------------------------------
CredentialValidatorMapper
-----------------------------------------
package com.runbook.dao;

import org.apache.ibatis.annotations.Result;
import org.apache.ibatis.annotations.Results;
import org.apache.ibatis.annotations.Select;

import com.runbook.domain.User;

public interface CredentialValidatorMapper {
	
	@Select("SELECT password FROM cm_users WHERE userName = #{SID}")
	public String getStoredHash(String SID);
	
	/*DOES NOT BELONG - REFACTOR*/
	@Select("SELECT * FROM cm_users WHERE username = #{SID}")
	@Results({
		@Result(column="firstName", property="firstName"),
		@Result(column="lastName", property="lastName"),
		@Result(column="email", property="email"),
		@Result(column="userName", property="username"),
		@Result(column="password", property="password"),
	})
	public User getUser(String SID);

}
--------------------------------------------------------------------------------------
CredentialValidatorSvcsImp
----------------
package com.runbook.svcs;

import java.io.IOException;

import javax.ws.rs.GET;
import javax.ws.rs.Path;
import javax.ws.rs.PathParam;
import javax.ws.rs.Produces;
import javax.ws.rs.core.MediaType;

import org.codehaus.jackson.JsonGenerationException;
import org.codehaus.jackson.map.JsonMappingException;
import org.codehaus.jackson.map.ObjectMapper;

import com.runbook.dao.CredentialValidatorDaoImpl;
import com.runbook.domain.Validator;


@Path("/validation")
public class CredentialValidatorSvcsImpl implements ICredentialValidatorSvcs {

	
	@Path("{sid}/{password}")
	@GET
	@Produces("application/JSON")
	public String isValidUser(@PathParam("sid") String sid ,@PathParam("password") String password){
		System.out.println("************"+  sid + " " + password);
		
		if(Validator.createValidator(sid, password).isUserValid())
			return "true";//"{isValidCredentials: [ true ]}";
		else
			return "false";//"{isValidCredentials: [ false ]}";
	}
	
	@Path("{sid}")
	@GET
	@Produces("application/JSON")
	public String getUser(@PathParam("sid") String sid) throws JsonGenerationException, IOException{
		
		String userAsJson = null;
		ObjectMapper mapper = new ObjectMapper();
		userAsJson = mapper.writerWithDefaultPrettyPrinter().writeValueAsString(new CredentialValidatorDaoImpl().getUser(sid));
		return userAsJson;
	}

}
--------------------------------------------------------------------------

<!DOCTYPE html>
<html>
	<script src="https://ajax.googleapis.com/ajax/libs/angularjs/1.6.4/angular.min.js"></script>
	<script type="text/javascript" src="snackOrder.js"></script>
	<!-- Latest compiled and minified CSS -->
<link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css" integrity="sha384-BVYiiSIFeK1dGmJRAkycuHAHRg32OmUcww7on3RYdg4Va+PmSTsz/K68vbdEjh4u" crossorigin="anonymous">
<body ng-app="myApp" ng-controller="orderCtrl" align="center">
	<div class="page-header">
  		<h1></h1>
	</div>
	<p>Get Order</p>
	<div>
		<label>Budget($):</label> <input type="text" ng-pattern="moneyPattern" ng-model="budget" placeholder="ex. 134.54">
		<button ng-click="getOrder()" class="btn btn-primary">Get Order</button>
	</div>
	<div align="center">
		<table class="table table-striped">
			<thead>
				<tr>
					<th>Name</th>
					<th>Store</th>
					<th>Price</th>
					<th>Quantity</th>
				</tr>
			</thead>
			<tbody>
				<tr ng-repeat="orderItem in orderItems">
					<td>{{ orderItem.order.name }}</td>
					<td>{{ orderItem.order.store }}</td>
					<td>{{ orderItem.order.price }}</td>
					<td>{{ orderItem.quantity }}</td>
				</tr>
			</tbody>
		</table>
	</div>
</body>
</html>


//JS

var app = angular.module('myApp', []);
app.controller('orderCtrl', function($scope, $http) {
	$scope.budget = 0.0;
	$scope.orderItems = [];
	$scope.getOrder = function()
	{
		$http.get("/orderResponse.json", {
			params : 10
		}).then( function( response ) {
			console.log( response );
			$scope.orderItems = response.data.orderItems;
			console.log( $scope.orderItems );
		});
	}
	$scope.moneyPattern = /^\d+$/;
});

//---------------------------------------------

{
	"preference" : 330,
	"total" : 164.34,
	"orderItems" : [
		{
			"quantity" : 2,
			"order" : {
				"name" : "Product A",
				"store" : "Store A",
				"price" : 123
			}
		},
		{
			"quantity" : 4,
			"order" : {
				"name" : "Product C",
				"store" : "Store E",
				"price" : 45
			}
		},
		{
			"quantity" : 6,
			"order" : {
				"name" : "Product D",
				"store" : "Store E",
				"price" : 45
			}
		},
		{
			"quantity" : 9,
			"order" : {
				"name" : "Product A",
				"store" : "Store H",
				"price" : 45
			}
		},
		{
			"quantity" : 1,
			"order" : {
				"name" : "Product F",
				"store" : "Store G",
				"price" : 45
			}
		}
	]
}

------------------------------------


Ext.define('DeleteThis.view.main.Main', {
    extend: 'Ext.panel.Panel',
    xtype: 'app-main',

    requires: [
        'Ext.plugin.Viewport',

        'DeleteThis.view.main.MainController',
        'DeleteThis.view.main.MainModel',
        'DeleteThis.view.main.List',
        'DeleteThis.view.main.MyComponent'
    ],

    controller: 'main',
    viewModel: {
        data : {
            naturalizationStatus : null,
            country : null,
            state : null,
            county : null
        },
        formulas : {
            isFormValid : function( get )
            {
                //debugger;
                var nat = get('naturalizationStatus')   
                var result =   !Ext.isEmpty( get('naturalizationStatus') ) &&
                        !Ext.isEmpty( get('country') ) &&
                        !Ext.isEmpty( get('state') ) &&
                        !Ext.isEmpty( get('county') ); 
                return result;
            }
        },
        stores : {
            countryStore : {
                fields : [
                    'name',
                    'value'
                ],
                data : [ {
                                name : 'NY',
                                value : 1
                            }]
            }
        }
    },
    items: [],
    initComponent : function()
    {
        var me = this;

        var myForm = Ext.widget('form',{
            title : 'Registration',
            bodyPadding : 10,
            defaults : {
                afterLabelTextTpl : '<span style="color:red;">*</span>',
                allowBlank : false,
                editable : false
            },
            items : [
                {
                    xtype : 'radiogroup',
                    fieldLabel : 'Naturalization Status',
                    preventMark : false,
                    items : [
                        {
                            boxLabel : 'US Citizen',
                            name : 'naturalizationStatus',
                            inputValue : 'us_citizen'
                        },
                        {
                            boxLabel : 'Immigrant',
                            name : 'naturalizationStatus',
                            inputValue : 'immigrant'
                        },
                        {
                            boxLabel : 'Ilegal Alien',
                            name : 'naturalizationStatus',
                            inputValue : 'illegal'
                        }
                    ],
                    bind : {
                        value : '{naturalizationStatus}'
                    }
                },
                {
                    xtype : 'datefield',
                    fieldLabel : 'Travel Date',
                    listeners : {
                        select : 'onDateSelect'
                    }
                },
                {
                    xtype : 'combo',
                    fieldLabel : 'Country',
                    displayField : 'name',
                    valueField : 'name',
                    bind : {
                        store : '{countryStore}',
                        value : '{country}'
                    },
                    listeners : {
                        change : function(combo, newValue)
                        {
                            if(Ext.isEmpty(newValue))
                                me.getViewModel().set('country', null);
                        }
                    }
                },
                {
                    xtype : 'combo',
                    fieldLabel : 'State',
                    displayField : 'name',
                    valueField : 'name',
                    store : {
                        data : [
                            {
                                name : 'NY',
                                value : 1
                            },
                            {
                                name : 'TX',
                                value : 2
                            },
                            {
                                name : 'CA',
                                value : 3
                            }
                        ]
                    },
                    bind : {
                        value : '{state}'
                    }
                },
                {
                    xtype : 'combo',
                    fieldLabel : 'County',
                    displayField : 'name',
                    valueField : 'name',
                    store : {
                        data : [
                            {
                                name : 'Queens',
                                value : 1
                            },
                            {
                                name : 'Brooklyn',
                                value : 2
                            },
                            {
                                name : 'Staten Island',
                                value : 3
                            }
                        ]
                    },
                    bind : {
                        value : '{county}'
                    }
                }
            ],
            buttons : [
                {
                    text : 'Submit',
                    /*bind : {
                        disabled : '{!isFormValid}'
                    },*/
                    formBind : true,
                    handler : function(btn)
                    {
                        console.log( btn.up('form').getValues() );
                    }
                }
            ]
        });
        

        me.items = [
            myForm
        ];
        this.callParent( arguments );
    },
    onclick : function()
    {
        // debugger;
        // var me = this;
        // var x = Ext.widget('window',{
        //     height : 400,
        //     width : 500,
        //     bind : {
        //         title : '{thirdBtn}'
        //     }
        // });
        // x.show();
    }
});
Ext.define('DeleteThis.view.main.MainController', {
    extend: 'Ext.app.ViewController',

    alias: 'controller.main',

    onDateSelect : function( datePicker, value, eOpts )
    {
        var me = this;
        //12-Mar-2018
        Ext.Ajax.request({
            url : '/static_data/nested_data.json',
            method : 'GET',
            success : function( response )
            {
                var json = Ext.JSON.decode( response.responseText, true );
                var countryData = json.data;
                var countryList = [];
                Ext.Array.forEach( countryData, function( country ){
                    countryList.push( { name : country.country, value : country.country} );
                });

                me.getViewModel().get('countryStore').loadRawData( countryList );
                console.log( json );
            }
        });
        //console.log( value )
    }
});


/*
var panel = Ext.widget('panel',{
            width : 300,
            height : 900,
            border : 1,
            items : [
                {
                    xtype : 'button',
                    bind : {
                        text : '{firstBtn}'
                    },
                    listeners : {
                        //click :'onclick',
                        click : function()
                        {
                            debugger;
                            //var me = this;
                            var x = Ext.widget('window',{
                                height : 400,
                                width : 500,
                                bind : {
                                    title : '{thirdBtn}'
                                }
                            });
                            x.show();
                        },
                        scope : this
                    }
                },
                {
                    xtype : 'container',
                    items : [
                        {
                            xtype : 'button',
                            bind : {
                                text : '{secondBtn}'
                            },
                            listeners : {
                                click : function()
                                {
                                    var innerBtn = Ext.widget('button',{
                                        bind : {
                                            text : '{thirdBtn}'
                                        }
                                    });
                                    me.add( innerBtn );
                                    //debugger;
                                    //this.viewModel.notify();
                                    //alert(innerBtn.getText());
                                }
                            }
                        }
                    ]
                },
                {
                    xtype : 'textfield',
                    bind : {
                        value : '{firstName}'
                    }
                },
                {
                    xtype : 'textfield',
                    bind : {
                        value : '{lastName}'
                    }
                },
                {
                    xtype : 'displayfield',
                    bind : {
                        value : '{fullName}'
                    }
                },
                {
                    xtype : 'grid',
                    bind : '{clientStore}',
                    width : 300,
                    height : 100,
                    columns : [
                        {
                            text : 'Client Id',
                            dataIndex : 'id',
                            flex : 1
                        },
                        {
                            text : 'Client Name',
                            dataIndex : 'name',
                            flex : 2
                        }
                    ],
                    reference : 'clientGrid',
                    publishes : 'title',
                    title : 'Hey'
                },
                {
                    xtype : 'displayfield',
                    bind : {
                        value : '{clientGrid.title}'
                    }
                },
                {
                    xtype : 'myComponent',
                    bind : {
                        randomValue : '{firstName}'
                    },
                    itemId : 'myComponent'
                }
            ]
        });


*/
---------------------------------------------------------
Ext.define('DeleteThis.view.DynamicTabPanelViewController',{
	extend : 'Ext.app.ViewController',
	alias : 'controller.dynamicTabPanelViewController',
	requires : [
		'DeleteThis.view.DataGrid'
	],
	listen : {
		controller : {
			'*' : {
				newTabRequest : 'onNewTabRequested'
			}
		}
	},
	init : function()
	{
		var me = this;

	},
	onNewTabRequested : function( args )
	{
		var me = this;
		var view = me.getView();

		var successFn = function( response )
		{
			var jsonResponse = Ext.JSON.decode( response.responseText , true );
			if( jsonResponse )
			{
				if( jsonResponse.alcreport && jsonResponse.alcreport[0] !== null )
				{
					var newTab = Ext.widget('dataGrid', {
						data : jsonResponse.alcreport,
						width : 500,
						height : 500,
						title : 'Data Grid'
					});
					view.add( newTab );
					view.setActiveTab( newTab );
				}

				//fire an event to tell the main tab page to switch to reports view
				if( !view.isVisible())
					view.show();

			}
		};
		var failureFn = function( response )
		{

		};

		//make ajax call to get the data
		Ext.Ajax.request({
			url : '/static_data/dynamic_data.json',
			method : 'GET',
			success : successFn,
			failure : failureFn
		});
	}
});

//fields : [ "corp", "LOB", "industry", "EL", "q_99_97", "q_75____marginalPathAlignedWrt_(CORP,)" ] <- generated in this class and passed to the class
//for each above field, generate a column whose title and dataIndex is the field
//pass to store
/*
	{
		"alcreport" : [
			{
				"corp" : "CORP",
				"LOB" : null,
				"industry" : null,
				"EL" : 2.57,
				"q_99_97" : 30.31667324,
				"q_75____marginalPathAlignedWrt_(CORP,)" : null
			}
		]
	}


*/
----------------------------------
Ext.define('DeleteThis.view.DataGrid',{
	extend : 'Ext.grid.Panel',
	alias : 'widget.dataGrid',
	requires : [],
	data : undefined,
	store : Ext.create('Ext.data.Store'),
	viewConfig : {
	    listeners : {
	     refresh : function (dataview) {
	      Ext.each(dataview.panel.columns, function (column) {
	       if (column.autoSizeColumn === true)
	        column.autoSize();
	      })
	     }
	    }
   	},
	initComponent : function()
	{
		var me = this;
		var data = me.config.data;
		me.columns = me.generateColumns( data );
		me.loadData( data );
		me.callParent( arguments );
	},
	generateColumns : function( data )
	{
		var me = this;
		var columnArr = [];
		if( data.length > 0 )
		{
			var fields = Ext.Object.getKeys(data[0]);
			Ext.each( fields, function( field ){
				var column = Ext.widget('gridcolumn',{
					text : field,
					dataIndex : field,
					align : 'center',
					autoSizeColumn : true
				});
				columnArr.push( column );
			});
		}
		return columnArr;
	},
	loadData : function( data )
	{
		var me = this;
		me.getStore().setData( data );
	}
})
